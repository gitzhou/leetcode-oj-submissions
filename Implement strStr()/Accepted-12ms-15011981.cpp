// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Implement strStr()
// https://leetcode.com/problems/implement-strstr/
// 

class Solution {
public:
    int strStr(char *haystack, char *needle) {
        return kmp(haystack, needle, calNextVal(needle));
    }
    
private:
    vector<int> calNextVal(const char *needle) {
        int plen = (int)strlen(needle);
        vector<int> nextval(plen, -1);
        int i = 0, j = -1;
        while (i < plen - 1) {
            if (j == -1 || needle[i] == needle[j]) {
                ++i;
                ++j;
                if (needle[i] == needle[j]) {
                    nextval[i] = nextval[j];
                } else {
                    nextval[i] = j;
                }
            } else {
                j = nextval[j];
            }
        }
        return nextval;
    }
    
    int kmp(const char *haystack, const char *needle, const vector<int> &nextval, int pos = 0) {
        int slen = (int)strlen(haystack);
        int plen = (int)strlen(needle);
        int i = pos, j = 0;
        while (i < slen && j < plen) {
            if (j == -1 || haystack[i] == needle[j]) {
                ++i;
                ++j;
            } else {
                j = nextval[j];
            }
        }
        if (j == plen) {
            return (int)(i - plen);
        }
        return -1;
    }
};

