// 
// Generated by FetchLeetcodeSubmission Project on GitCafe.
// Visit https://gitcafe.com/aaronzhou/FetchLeetcodeSubmission for more information.
// Contact Me: aaron67[AT]aaron67.cc
// 
// Reverse Linked List II
// https://leetcode.com/problems/reverse-linked-list-ii/
// 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        ListNode *list = head;
        if (m != n) {
            ListNode *pm = NULL, *prem = NULL, *pn = NULL, *nextn = NULL;
            int index = 1;
            ListNode *p = head, *pre = NULL;
            // 找到m、n两个结点
            while (index <= n && p != NULL) {
                if (index == m) {
                    prem = pre;
                    pm = p;
                }
                if (index == n) {
                    pn = p;
                    nextn = p->next;
                }
                index++;
                pre = p;
                p = p->next;
            }
            // 倒序链表 m --> ... -> n
            pn->next = NULL;
            ListNode *from, *to;
            reverseList(pm, &from, &to);
            // 加上头尾
            to->next = nextn;
            if (prem == NULL) {
                list = from;
            } else {
                prem->next = from;
            }
        }
        return list;
    }
    
private:
    // 倒序链表，倒序后的链表头尾结点用head、tail带回
    void reverseList(ListNode *list, ListNode **head, ListNode **tail) {
        if (list == NULL) {
            *head = NULL;
            *tail = NULL;
            return;
        }
        *tail = list;
        ListNode *pre = NULL, *p = list, *next = list->next;
        while (p != NULL) {
            p->next = pre;
            pre = p;
            p = next;
            if (next != NULL) {
                next = next->next;
            }
        }
        *head = pre;
    }
};

// 
// Reverse a linked list from position m to n. Do it in-place and in one-pass. For example: Given 1->2->3->4->5->NULL, m = 2 and n = 4, return 1->4->3->2->5->NULL. Note: Given m, n satisfy the following condition: 1 ≤ m ≤ n ≤ length of list. Show Tags Linked List Show Similar Problems (E) Reverse Linked List
// 
