// 
// Generated by FetchLeetcodeSubmission Project on GitCafe.
// Visit https://gitcafe.com/aaronzhou/FetchLeetcodeSubmission for more information.
// Contact Me: aaron67[AT]aaron67.cc
// 
// 138. Copy List with Random Pointer
// https://leetcode.com/problems/copy-list-with-random-pointer/
// 

/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        RandomListNode *list = NULL, *pNew = NULL;
        RandomListNode *pOld = head;
        map<RandomListNode *, int> dicOld;
        map<int, RandomListNode *> dicNew;
        int i = 0;
        // deep copy label and next
        // build the (AddressOfNode, NodeIndexInList) map
        while (pOld != NULL) {
            dicOld[pOld] = i;
            RandomListNode *node = new RandomListNode(pOld->label);
            dicNew[i] = node;
            if (list == NULL) {
                list = node;
            } else {
                pNew->next = node;
            }
            pNew = node;
            pOld = pOld->next;
            ++i;
        }
        // deep copy random
        pOld = head;
        pNew = list;
        while (pNew != NULL) {
            if (pOld->random == NULL) {
                pNew->random = NULL;
            } else {
                pNew->random = dicNew[dicOld[pOld->random]];
            }
            pOld = pOld->next;
            pNew = pNew->next;
        }
        return list;
    }
};

// 
// A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null. Return a deep copy of the list. Subscribe to see which companies asked this question Show Tags Hash Table Linked List Show Similar Problems (M) Clone Graph
// 
