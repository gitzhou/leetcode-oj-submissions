// 
// Generated by FetchLeetcodeSubmission Project on GitCafe.
// Visit https://gitcafe.com/aaronzhou/FetchLeetcodeSubmission for more information.
// Contact Me: aaron67[AT]aaron67.cc
// 
// Sum Root to Leaf Numbers
// https://leetcode.com/problems/sum-root-to-leaf-numbers/
// 

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int sumNumbers(TreeNode *root) {
        int current = 0, sum = 0;
        preOrderTraversal(root, current, sum);
        return sum;
    }
    
private:
    void preOrderTraversal(TreeNode *node, int &current, int &sum) {
        if (node == NULL) {
            return;
        }
        current = current * 10 + node->val;
        if (node->left == NULL && node->right == NULL) {
            sum += current;
        } else {
            preOrderTraversal(node->left, current, sum);
            preOrderTraversal(node->right, current, sum);
        }
        current = (current - node->val ) / 10;
    }
};

// 
// Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number. An example is the root-to-leaf path 1->2->3 which represents the number 123. Find the total sum of all root-to-leaf numbers. For example, 
//     1
//    / \
//   2   3
//  The root-to-leaf path 1->2 represents the number 12. The root-to-leaf path 1->3 represents the number 13. Return the sum = 12 + 13 = 25. Show Tags Tree Depth-first Search Show Similar Problems (E) Path Sum (H) Binary Tree Maximum Path Sum
// 
