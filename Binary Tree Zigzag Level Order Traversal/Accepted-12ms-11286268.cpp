// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Binary Tree Zigzag Level Order Traversal
// https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/
// 

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > zigzagLevelOrder(TreeNode *root) {
        vector<vector<int> > level;
        preOrderTraversal(root, 0, level);
        for (int i = 1; i < level.size(); i += 2) {
            reverse(level[i].begin(), level[i].end());
        }
        return level;
    }
    
private:
    void preOrderTraversal(TreeNode *node, int depth, vector<vector<int> > &level) {
        if (node == NULL) {
            return;
        }
        if (level.size() <= depth) {
            vector<int> ivec;
            ivec.push_back(node->val);
            level.push_back(ivec);
        } else {
            level[depth].push_back(node->val);
        }
        ++depth;
        preOrderTraversal(node->left, depth, level);
        preOrderTraversal(node->right, depth, level);
    }
};

