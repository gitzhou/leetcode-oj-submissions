// 
// Generated by FetchLeetcodeSubmission Project on GitCafe.
// Visit https://gitcafe.com/aaronzhou/FetchLeetcodeSubmission for more information.
// Contact Me: aaron67[AT]aaron67.cc
// 
// Minimum Path Sum
// https://oj.leetcode.com/problems/minimum-path-sum/
// 

class Solution {
public:
    int minPathSum(vector<vector<int> > &grid) {
        if (grid.size() == 0) {
            return 0;
        }
        int iTable[] = {0, -1}, jTable[] = {-1, 0};
        for (int i = 0; i < grid.size(); ++i) {
            for (int j = 0; j < grid[i].size(); ++j) {
                if (i == 0 && j == 0) {
                    continue;
                }
                int current = grid[i][j];
                int left = INT_MAX, up = INT_MAX;
                if (i + iTable[0] >= 0 && j + jTable[0] >= 0) {
                    left = grid[i + iTable[0]][j + jTable[0]];
                }
                if (i + iTable[1] >= 0 && j + jTable[1] >= 0) {
                    up = grid[i + iTable[1]][j + jTable[1]];
                }
                grid[i][j] = current + min(left, up);
            }
        }
        return grid[grid.size() - 1][grid[grid.size() - 1].size() - 1];
    }
};

// 
// Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path. 
// Note: 
// You can only move either down or right at any point in time.
// 
