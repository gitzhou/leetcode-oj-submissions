// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// 74. Search a 2D Matrix
// https://leetcode.com/problems/search-a-2d-matrix/
// 

class Solution {
public:
    bool searchMatrix(vector<vector<int> > &matrix, int target) {
        if (matrix.size() == 0) {
            return false;
        }
        return find(matrix, target, 0, (int)(matrix[0].size() - 1));
    }
    
private:
    bool find(const vector<vector<int> > &matrix, int target, int row, int col) {
        if (row >= matrix.size() || col < 0) {
            return false;
        }
        if (matrix[row][col] == target) {
            return true;
        } else if (matrix[row][col] > target) {
            return find(matrix, target, row, col - 1);
        } else {
            return find(matrix, target, row + 1, col);
        }
    }
};

// 
// Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties: Integers in each row are sorted from left to right. The first integer of each row is greater than the last integer of the previous row. For example, Consider the following matrix: 
// [
//   [1,   3,  5,  7],
//   [10, 11, 16, 20],
//   [23, 30, 34, 50]
// ]
//  Given target = 3, return true. Subscribe to see which companies asked this question Show Tags Array Binary Search Show Similar Problems (M) Search a 2D Matrix II
// 
