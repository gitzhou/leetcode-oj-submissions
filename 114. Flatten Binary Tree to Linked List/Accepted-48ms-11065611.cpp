// 
// Generated by FetchLeetcodeSubmission Project on GitCafe.
// Visit https://gitcafe.com/aaronzhou/FetchLeetcodeSubmission for more information.
// Contact Me: aaron67[AT]aaron67.cc
// 
// 114. Flatten Binary Tree to Linked List
// https://leetcode.com/problems/flatten-binary-tree-to-linked-list/
// 

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode *root) {
        if (root == NULL) {
            return;
        }
        flatten(root->left);
        flatten(root->right);
        
        if (root->left != NULL) {
            TreeNode *rightSubTree = root->right;
            root->right = root->left;
            root->left = NULL;
            TreeNode *p = root->right;
            while (p != NULL && p->right != NULL) {
                p = p->right;
            }
            p->right = rightSubTree;
        }
    }
};

// 
// Given a binary tree, flatten it to a linked list in-place. For example, Given 
//          1
//         / \
//        2   5
//       / \   \
//      3   4   6
//  The flattened tree should look like: 
//    1
//     \
//      2
//       \
//        3
//         \
//          4
//           \
//            5
//             \
//              6
//  click to show hints. Hints: If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal. Subscribe to see which companies asked this question Show Tags Tree Depth-first Search
// 
