// 
// Generated by FetchLeetcodeSubmission Project on GitCafe.
// Visit https://gitcafe.com/aaronzhou/FetchLeetcodeSubmission for more information.
// Contact Me: aaron67[AT]aaron67.cc
// 
// Fraction to Recurring Decimal
// https://oj.leetcode.com/problems/fraction-to-recurring-decimal/
// 

class Solution {
public:
    string fractionToDecimal(int numerator, int denominator) {
        // 防止溢出
        long long n = numerator, d = denominator;
        if (n < 0) {
            n *= -1;
        }
        if (d < 0) {
            d *= -1;
        }
        // 运算
        string result;
        stringstream ss;
        ss << n / d;
        ss >> result;
        if (n % d != 0) {
            result += ".";
            n %= d;
            vector<long long> sequence(1, n); // 计算小数部分时，每次运算的余数序列
            string data; // 小数部分
            int i = 0;
            while (sequence[sequence.size() - 1] != 0) {
                data.push_back(sequence[i] * 10 / d + '0');
                sequence.push_back(sequence[i] * 10 % d);
                // 查看sequence是否规律重复
                int j = 0;
                while (j < sequence.size() - 1) {
                    if (sequence[j] == sequence[sequence.size() - 1]) {
                        break;
                    }
                    ++j;
                }
                if (j < sequence.size() - 1) { // 规律出现，循环小数
                    if (j == 0) {
                        result = result + "(" + data + ")";
                    } else {
                        result = result + data.substr(0, j) + "(" + data.substr(j) + ")";
                    }
                    break;
                }
                ++i;
            }
            if (sequence[sequence.size() - 1] == 0) { // 整除了
                result += data;
            }
        }
        // 判断正负
        if ((numerator < 0 ^ denominator < 0) && result != "0") {
            result = "-" + result;
        }
        return result;
    }
};

// 
// Given two integers representing the numerator and denominator of a fraction, return the fraction in string format. 
// If the fractional part is repeating, enclose the repeating part in parentheses. 
// For example, 
// Given numerator = 1, denominator = 2, return "0.5". 
// Given numerator = 2, denominator = 1, return "2". 
// Given numerator = 2, denominator = 3, return "0.(6)". 
// Credits: 
// Special thanks to @Shangrila for adding this problem and creating all test cases. 
// Show 
// Tags 
// Hash 
// Table 
// Math
// 
