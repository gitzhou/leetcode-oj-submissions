// 
// Generated by FetchLeetcodeSubmission Project on GitCafe.
// Visit https://gitcafe.com/aaronzhou/FetchLeetcodeSubmission for more information.
// Contact Me: aaron67[AT]aaron67.cc
// 
// Binary Tree Preorder Traversal
// https://oj.leetcode.com/problems/binary-tree-preorder-traversal/
// 

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode *root) {
        vector<int> sequence;
        stack<TreeNode *> st;
        TreeNode *p = root;
        while (p != NULL || !st.empty()) {
            if (p == NULL) {
                p = st.top();
                st.pop();
                p = p->right;
            } else {
                sequence.push_back(p->val); // Visit
                st.push(p);
                p = p->left;
            }
        }
        return sequence;
    }
};

// 
// Given a binary tree, return the preorder traversal of its nodes' values. For example: Given binary tree {1,#,2,3}, 
//    1
//     \
//      2
//     /
//    3
//  return [1,2,3]. Note: Recursive solution is trivial, could you do it iteratively? Show Tags Tree Stack
// 
