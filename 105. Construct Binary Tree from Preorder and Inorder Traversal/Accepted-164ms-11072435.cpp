// 
// Generated by FetchLeetcodeSubmission Project on GitCafe.
// Visit https://gitcafe.com/aaronzhou/FetchLeetcodeSubmission for more information.
// Contact Me: aaron67[AT]aaron67.cc
// 
// 105. Construct Binary Tree from Preorder and Inorder Traversal
// https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/
// 

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        return build(preorder, 0, preorder.size(), inorder, 0, inorder.size());
    }
    
private:
    // preorder[preorderi, preorderj)
    // inorder[inorderi, inorderj)
    TreeNode *build(const vector<int> &preorder, size_t preorderi, size_t preorderj,
                    const vector<int> &inorder, size_t inorderi, size_t inorderj) {
        if (preorderi == preorderj || inorderi == inorderj) {
            return NULL;
        }
        int val = preorder[preorderi];
        TreeNode *node = new TreeNode(val);
        size_t inorderMid = inorderi, preorderMid = preorderi + 1;
        while (inorderMid < inorderj) {
            if (inorder[inorderMid] == val) {
                break;
            }
            ++inorderMid;
            ++preorderMid;
        }
        node->left = build(preorder, preorderi + 1, preorderMid, inorder, inorderi, inorderMid);
        node->right = build(preorder, preorderMid, preorderj, inorder, inorderMid + 1, inorderj);
        return node;
    }
};

// 
// Given preorder and inorder traversal of a tree, construct the binary tree. Note: You may assume that duplicates do not exist in the tree. Subscribe to see which companies asked this question Show Tags Tree Array Depth-first Search Show Similar Problems (M) Construct Binary Tree from Inorder and Postorder Traversal
// 
