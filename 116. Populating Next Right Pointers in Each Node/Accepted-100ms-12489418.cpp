// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// 116. Populating Next Right Pointers in Each Node
// https://leetcode.com/problems/populating-next-right-pointers-in-each-node/
// 

/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root) {
        if (root == NULL) {
            return;
        }
        if (root->left != NULL && root->right != NULL) {
            root->left->next = root->right;
            if (root->next != NULL) {
                root->right->next = root->next->left;
            }
        }
        connect(root->left);
        connect(root->right);
    }
};

// 
// Given a binary tree 
//     struct TreeLinkNode {
//       TreeLinkNode *left;
//       TreeLinkNode *right;
//       TreeLinkNode *next;
//     }
//  Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL. Initially, all next pointers are set to NULL. Note: You may only use constant extra space. You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children). For example, Given the following perfect binary tree, 
//          1
//        /  \
//       2    3
//      / \  / \
//     4  5  6  7
//  After calling your function, the tree should look like: 
//          1 -> NULL
//        /  \
//       2 -> 3 -> NULL
//      / \  / \
//     4->5->6->7 -> NULL
//  Subscribe to see which companies asked this question Show Tags Tree Depth-first Search Show Similar Problems (H) Populating Next Right Pointers in Each Node II (M) Binary Tree Right Side View
// 
