// 
// Generated by FetchLeetcodeSubmission Project on GitCafe.
// Visit https://gitcafe.com/aaronzhou/FetchLeetcodeSubmission for more information.
// Contact Me: aaron67[AT]aaron67.cc
// 
// Maximum Subarray
// https://oj.leetcode.com/problems/maximum-subarray/
// 

class Solution {
public:
    int maxSubArray(int A[], int n) {
        int max = A[0], sum = 0;
        for (int i = 0; i < n; ++i) {
            if (sum <= 0) {
                sum = A[i];
            } else {
                sum += A[i];
            }
            
            if (sum > max) {
                max = sum;
            }
        }
        return max;
    }
};

// 
// Find the contiguous subarray within an array (containing at least one number) which has the largest sum. For example, given the array [−2,1,−3,4,−1,2,1,−5,4], the contiguous subarray [4,−1,2,1] has the largest sum = 6. click to show more practice. More practice: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle. Show Tags Divide and Conquer Array Dynamic Programming
// 
