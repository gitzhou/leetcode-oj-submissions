// 
// Generated by FetchLeetcodeSubmission Project on GitCafe.
// Visit https://gitcafe.com/aaronzhou/FetchLeetcodeSubmission for more information.
// Contact Me: aaron67[AT]aaron67.cc
// 
// Candy
// https://leetcode.com/problems/candy/
// 

class Solution {
public:
    int candy(vector<int> &ratings) {
        vector<int> counts(ratings.size(), 0);
        int total = 0;
        for (int i = 0; i < ratings.size(); ++i) {
            total += cal(ratings, counts, i);
        }
        return total;
    }
    
private:
    int cal(const vector<int> &ratings, vector<int> &counts, int i) {
        if (counts[i] != 0) {
            return counts[i];
        }
        int leftRate = (i > 0? ratings[i - 1]: INT_MAX);
        int rightRate = (i < ratings.size() - 1? ratings[i + 1]: INT_MAX);
        if (ratings[i] <= leftRate && ratings[i] <= rightRate) {
            counts[i] = 1;
        } else if (ratings[i] > leftRate && ratings[i] <= rightRate) {
            counts[i] = cal(ratings, counts, i - 1) + 1;
        } else if (ratings[i] <= leftRate && ratings[i] > rightRate) {
            counts[i] = cal(ratings, counts, i + 1) + 1;
        } else {
            counts[i] = max(cal(ratings, counts, i - 1), cal(ratings, counts, i + 1)) + 1;
        }
        return counts[i];
    }
};

// 
// There are N children standing in a line. Each child is assigned a rating value. You are giving candies to these children subjected to the following requirements: Each child must have at least one candy. Children with a higher rating get more candies than their neighbors. What is the minimum candies you must give? Show Tags Greedy
// 
