// 
// Generated by FetchLeetcodeSubmission Project on GitCafe.
// Visit https://gitcafe.com/aaronzhou/FetchLeetcodeSubmission for more information.
// Contact Me: aaron67[AT]aaron67.cc
// 
// Pascal's Triangle
// https://oj.leetcode.com/problems/pascals-triangle/
// 

class Solution {
public:
    vector<vector<int> > generate(int numRows) {
        vector<vector<int> > pascal;
        if (numRows >= 1) {
            vector<int> vi(1, 1);
            pascal.push_back(vi);
        }
        if (numRows >= 2) {
            vector<int> vi(2, 1);
            pascal.push_back(vi);
        }
        for (int i = 3; i <= numRows; ++i) {
            vector<int> vi(i, 1);
            for (int j = 1; j < i - 1; ++j) {
                vi[j] = pascal[i - 2][j - 1] + pascal[i - 2][j];
            }
            pascal.push_back(vi);
        }
        return pascal;
    }
};

// 
// Given numRows, generate the first numRows of Pascal's triangle. For example, given numRows = 5, Return 
// [
//      [1],
//     [1,1],
//    [1,2,1],
//   [1,3,3,1],
//  [1,4,6,4,1]
// ]
//  Show Tags Array
// 
