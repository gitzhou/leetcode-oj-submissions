// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Combination Sum
// https://leetcode.com/problems/combination-sum/
// 

class Solution {
public:
    vector<vector<int> > combinationSum(vector<int> &candidates, int target) {
        vector<vector<int> > result;
        if (candidates.size() > 0) {
            sort(candidates.begin(), candidates.end());
            int i = 0;
            vector<int> select(candidates.size(), 0);
            while (true) {
                int sum = 0;
                for (int j = 0; j <= i; ++j) {
                    sum += candidates[j] * select[j];
                }
                if (sum == target) {
                    // 一组解
                    vector<int> solution;
                    for (int j = 0; j <= i; ++j) {
                        for (int k = 0; k < select[j]; ++k) {
                            solution.push_back(candidates[j]);
                        }
                    }
                    result.push_back(solution);
                }
                if (sum < target && i < select.size() - 1) {
                    // 扩充元素
                    select[++i] = 0;
                    continue;
                }
                while (i >= 0 && select[i] >= target / candidates[i]) {
                    --i;
                }
                if (i == -1) {
                    break; // 全部搜索完
                } else {
                    ++select[i]; // 下一种情况
                }
            }
        }
        return result;
    }
};

