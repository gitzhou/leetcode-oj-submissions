// 
// Generated by FetchLeetcodeSubmission Project on GitCafe.
// Visit https://gitcafe.com/aaronzhou/FetchLeetcodeSubmission for more information.
// Contact Me: aaron67[AT]aaron67.cc
// 
// Linked List Cycle II
// https://oj.leetcode.com/problems/linked-list-cycle-ii/
// 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode *one = head, *two = head;
        while (one != NULL && two != NULL) {
            one = one->next;
            if ((two = two->next) != NULL) {
                two = two->next;
            }
            if (one == two && one != NULL) {
                while (one->next != one &&
                       head != one &&
                       (head = head->next) != (one = one->next)) {
                    ;
                }
                return one;
            }
        }
        return NULL;
    }
};

// 
// Given a linked list, return the node where the cycle begins. 
// If there is no cycle, return null. 
// Follow up: 
// Can you solve it without using extra space?
// 
