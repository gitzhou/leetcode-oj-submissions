// 
// Generated by FetchLeetcodeSubmission Project on GitCafe.
// Visit https://gitcafe.com/aaronzhou/FetchLeetcodeSubmission for more information.
// Contact Me: aaron67[AT]aaron67.cc
// 
// Symmetric Tree
// https://leetcode.com/problems/symmetric-tree/
// 

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Record {
public:
    Record(TreeNode *p, int l, bool left = true) {
        pnode = p;
        level = l;
        isleft = left;
    }
    
    TreeNode *pnode;
    int level;
    bool isleft;
};

class Solution {
public:
    bool isSymmetric(TreeNode *root) {
        queue<Record> q;
        q.push(Record(root, 0));
        while (!q.empty()) {
            Record r = q.front();
            q.pop();
            if (r.level == 0 && r.pnode != NULL) { // 非空根节点
                q.push(Record(r.pnode->left, 1));
                q.push(Record(r.pnode->right, 1, false));
                continue;
            } else if (r.level == 0 && r.pnode == NULL) { // 空的根节点
                return true;
            }
            stack<TreeNode *> st; // 用于判定是不是对称的栈
            // 当前层第一个节点入栈
            if (r.isleft) { // 是根节点的左子树
                st.push(r.pnode);
                if (r.pnode != NULL) {
                    q.push(Record(r.pnode->left, r.level + 1));
                    q.push(Record(r.pnode->right, r.level + 1));
                }
            } else { // 第一个节点不能是根节点的右子树
                return false;
            }
            while (!q.empty() && q.front().level == r.level) { // 加入本层所有节点
                Record e = q.front();
                q.pop();
                if (e.isleft) {
                    st.push(e.pnode);
                    if (e.pnode != NULL) {
                        q.push(Record(e.pnode->left, e.level + 1));
                        q.push(Record(e.pnode->right, e.level + 1));
                    }
                } else {
                    if ((st.top() == NULL && e.pnode == NULL) ||
                        (!st.empty() && st.top() != NULL && e.pnode != NULL && st.top()->val == e.pnode->val)) {
                        // 两个节点都是空 或者
                        // 两个节点值相同
                        st.pop();
                    } else {
                        return false;
                    }
                    if (e.pnode != NULL) {
                        q.push(Record(e.pnode->left, e.level + 1, false));
                        q.push(Record(e.pnode->right, e.level + 1, false));
                    }
                }
            }
            if (!st.empty()) {
                return false;
            }
        }
        return true;
    }
};

// 
// Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center). For example, this binary tree is symmetric: 
//     1
//    / \
//   2   2
//  / \ / \
// 3  4 4  3
//  But the following is not: 
//     1
//    / \
//   2   2
//    \   \
//    3    3
//  Note: Bonus points if you could solve it both recursively and iteratively. confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ. OJ's Binary Tree Serialization: The serialization of a binary tree follows a level order traversal, where '#' signifies a path terminator where no node exists below. Here's an example: 
//    1
//   / \
//  2   3
//     /
//    4
//     \
//      5
//  The above binary tree is serialized as "{1,2,3,#,#,4,#,#,5}". Show Tags Tree Depth-first Search
// 
