// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// 162. Find Peak Element
// https://leetcode.com/problems/find-peak-element/
// 

class Solution {
public:
    int findPeakElement(const vector<int> &num) {
        if (num.size() == 1) {
            return 0;
        }
        return findPeak(num, 0, (int)(num.size() - 1));
    }
    
private:
    int findPeak(const vector<int> &num, int left, int right) {
        int mid = (left + right) / 2;
        int leftVal = (mid - 1 >= 0? num[mid - 1]: INT_MIN);
        int rightVal = (mid + 1 < num.size()? num[mid + 1]: INT_MIN);
        if (num[mid] > leftVal && num[mid] > rightVal) {
            return mid;
        } else if (num[mid] < leftVal) {
            return findPeak(num, left, mid - 1);
        } else {
            return findPeak(num, mid + 1, right);
        }
    }
};

// 
// A peak element is an element that is greater than its neighbors. Given an input array where num[i] ≠ num[i+1], find a peak element and return its index. The array may contain multiple peaks, in that case return the index to any one of the peaks is fine. You may imagine that num[-1] = num[n] = -∞. For example, in array [1, 2, 3, 1], 3 is a peak element and your function should return the index number 2. click to show spoilers. Note: Your solution should be in logarithmic complexity. Credits: Special thanks to @ts for adding this problem and creating all test cases. Subscribe to see which companies asked this question Show Tags Array Binary Search
// 
