// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Intersection of Two Linked Lists
// https://leetcode.com/problems/intersection-of-two-linked-lists/
// 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int alen = listLen(headA), blen = listLen(headB);
        ListNode *pIntersect = NULL;
        if (alen != 0 && blen != 0) {
            ListNode *pa = headA, *pb = headB;
            int diff = abs(alen - blen);
            if (diff != 0) {
                ListNode *pLonger = pa;
                if (alen < blen) {
                    pLonger = pb;
                }
                for (int i = 0; i < diff; ++i) {
                    pLonger = pLonger->next;
                }
                if (alen < blen) {
                    pb = pLonger;
                } else {
                    pa = pLonger;
                }
            }
            while (pa != NULL && pb != NULL) {
                if (pa == pb) {
                    pIntersect = pa;
                    break;
                }
                pa = pa->next;
                pb = pb->next;
            }
        }
        return pIntersect;
    }
    
private:
    int listLen(ListNode *list) {
        int len = 0;
        while (list != NULL) {
            ++len;
            list = list->next;
        }
        return len;
    }
};

